pipeline {
    agent any

    parameters {
        string(name: 'BRANCH_NAME', defaultValue: 'develop/1.0.0', description: 'Develop branch name')
    }

    environment {
        FLUTTER_VERSION = '3.24.0'
        FLAVOR = 'dev'
    }

    triggers {
        // develop 브랜치에 push 시 트리거
        GenericTrigger(
            genericVariables: [
                [key: 'ref', value: '$.ref'],
                [key: 'repository_name', value: '$.repository.name']
            ],
            causeString: 'Triggered by GitHub push to develop branch',
            token: 'dev-build-trigger',
            printContributedVariables: true,
            printPostContent: true,
            regexpFilterText: '$ref',
            regexpFilterExpression: '^refs/heads/develop/.*'
        )
    }

    stages {
        stage('Checkout') {
            steps {
                script {
                    def branchName = params.BRANCH_NAME ?: env.GIT_BRANCH?.replace('origin/', '') ?: 'develop/1.0.0'
                    checkout([
                        $class: 'GitSCM',
                        branches: [[name: "*/${branchName}"]],
                        userRemoteConfigs: [[
                            url: env.GIT_URL,
                            credentialsId: 'github-credentials'
                        ]]
                    ])
                }
            }
        }

        stage('Setup Environment') {
            parallel {
                stage('Setup Flutter') {
                    steps {
                        sh '''
                            flutter --version
                            flutter config --no-analytics
                            flutter pub get
                        '''
                    }
                }
                stage('Setup Android') {
                    steps {
                        script {
                            // Android 키스토어 설정
                            withCredentials([
                                string(credentialsId: 'android-keystore-base64', variable: 'ANDROID_KEYSTORE_BASE64'),
                                string(credentialsId: 'android-keystore-password', variable: 'ANDROID_KEYSTORE_PASSWORD'),
                                string(credentialsId: 'android-key-password', variable: 'ANDROID_KEY_PASSWORD'),
                                string(credentialsId: 'android-key-alias', variable: 'ANDROID_KEY_ALIAS')
                            ]) {
                                sh '''
                                    echo "$ANDROID_KEYSTORE_BASE64" | base64 --decode > android/app/mobble-integration.keystore
                                    cat > android/key.properties << EOF
storePassword=$ANDROID_KEYSTORE_PASSWORD
keyPassword=$ANDROID_KEY_PASSWORD
keyAlias=$ANDROID_KEY_ALIAS
storeFile=mobble-integration.keystore
EOF
                                '''
                            }
                        }
                    }
                }
            }
        }

        stage('Build Android') {
            steps {
                sh '''
                    flutter build apk --flavor dev --dart-define=FLAVOR=dev
                    ls -la build/app/outputs/flutter-apk/
                '''
            }
            post {
                always {
                    archiveArtifacts artifacts: 'build/app/outputs/flutter-apk/app-dev-release.apk', allowEmptyArchive: false
                }
            }
        }

        stage('Build iOS') {
            when {
                expression { return isUnix() && sh(script: 'uname', returnStdout: true).trim() == 'Darwin' }
            }
            steps {
                script {
                    withCredentials([
                        string(credentialsId: 'ios-build-certificate-base64', variable: 'BUILD_CERTIFICATE_BASE64'),
                        string(credentialsId: 'ios-p12-password', variable: 'P12_PASSWORD'),
                        string(credentialsId: 'ios-provision-profile-base64', variable: 'BUILD_PROVISION_PROFILE_BASE64'),
                        string(credentialsId: 'ios-keychain-password', variable: 'KEYCHAIN_PASSWORD')
                    ]) {
                        sh '''
                            # iOS 인증서 및 프로비저닝 프로파일 설정
                            CERTIFICATE_PATH=$WORKSPACE/build_certificate.p12
                            PP_PATH=$WORKSPACE/build_pp.mobileprovision
                            KEYCHAIN_PATH=$WORKSPACE/app-signing.keychain-db

                            echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode > $CERTIFICATE_PATH
                            echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode > $PP_PATH

                            security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
                            security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
                            security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

                            security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
                            security list-keychain -d user -s $KEYCHAIN_PATH

                            mkdir -p ~/Library/MobileDevice/Provisioning\\ Profiles
                            cp $PP_PATH ~/Library/MobileDevice/Provisioning\\ Profiles/

                            # iOS 빌드
                            flutter build ios --flavor dev --dart-define=FLAVOR=dev --release --no-codesign
                            cd ios
                            xcodebuild -workspace Runner.xcworkspace -scheme dev -configuration Release-dev archive -archivePath ../build/ios/Runner.xcarchive
                            xcodebuild -exportArchive -archivePath ../build/ios/Runner.xcarchive -exportOptionsPlist ExportOptions-dev.plist -exportPath ../build/ios/ipa
                        '''
                    }
                }
            }
            post {
                always {
                    archiveArtifacts artifacts: 'build/ios/ipa/*.ipa', allowEmptyArchive: true
                }
            }
        }

        stage('Deploy to Firebase') {
            steps {
                script {
                    withCredentials([
                        string(credentialsId: 'firebase-dev-android-app-id', variable: 'FIREBASE_DEV_ANDROID_APP_ID'),
                        string(credentialsId: 'firebase-dev-ios-app-id', variable: 'FIREBASE_DEV_IOS_APP_ID'),
                        file(credentialsId: 'firebase-service-account-key', variable: 'FIREBASE_SERVICE_ACCOUNT_KEY')
                    ]) {
                        sh '''
                            # Firebase CLI 설치 및 로그인
                            npm install -g firebase-tools
                            export GOOGLE_APPLICATION_CREDENTIALS=$FIREBASE_SERVICE_ACCOUNT_KEY

                            # Android APK 업로드
                            if [ -f build/app/outputs/flutter-apk/app-dev-release.apk ]; then
                                firebase appdistribution:distribute build/app/outputs/flutter-apk/app-dev-release.apk \
                                    --app $FIREBASE_DEV_ANDROID_APP_ID \
                                    --groups "qa-team" \
                                    --release-notes "Dev build from develop branch - Build #${BUILD_NUMBER}"
                            fi

                            # iOS IPA 업로드 (macOS에서만)
                            if [ -f build/ios/ipa/*.ipa ]; then
                                firebase appdistribution:distribute build/ios/ipa/*.ipa \
                                    --app $FIREBASE_DEV_IOS_APP_ID \
                                    --groups "qa-team" \
                                    --release-notes "Dev build from develop branch - Build #${BUILD_NUMBER}"
                            fi
                        '''
                    }
                }
            }
        }
    }

    post {
        always {
            cleanWs()
        }
        success {
            script {
                // Slack 알림 등
                echo "Dev build and deployment successful!"
            }
        }
        failure {
            script {
                // 실패 알림
                echo "Dev build failed!"
            }
        }
    }
}
