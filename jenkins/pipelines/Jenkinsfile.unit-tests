pipeline {
    agent any

    parameters {
        string(name: 'BRANCH_NAME', defaultValue: 'develop/1.0.0', description: 'Target branch name')
    }

    environment {
        FLUTTER_VERSION = '3.24.0'
        FLUTTER_HOME = "${env.HOME}/flutter"
        PATH = "${env.FLUTTER_HOME}/bin:${env.PATH}"
    }

    triggers {
        // PR 생성/업데이트 시 트리거 (Generic Webhook Trigger 플러그인 필요)
        GenericTrigger(
            genericVariables: [
                [key: 'action', value: '$.action'],
                [key: 'pr_target_branch', value: '$.pull_request.base.ref'],
                [key: 'pr_source_branch', value: '$.pull_request.head.ref']
            ],
            causeString: 'Triggered by GitHub PR',
            token: 'unit-tests-trigger',
            printContributedVariables: true,
            printPostContent: true,
            regexpFilterText: '$action $pr_target_branch',
            regexpFilterExpression: '^(opened|synchronize|reopened) develop/.*'
        )
    }

    stages {
        stage('Checkout') {
            steps {
                script {
                    def branchName = params.BRANCH_NAME ?: env.pr_source_branch ?: 'develop/1.0.0'
                    checkout([
                        $class: 'GitSCM',
                        branches: [[name: "*/${branchName}"]],
                        userRemoteConfigs: [[
                            url: env.GIT_URL,
                            credentialsId: 'github-credentials'
                        ]]
                    ])
                }
            }
        }

        stage('Setup Flutter') {
            steps {
                script {
                    sh '''
                        # macOS에서 Homebrew로 설치된 Flutter 사용 또는 Jenkins 홈에 설치
                        if ! command -v flutter &> /dev/null; then
                            echo "Flutter not found, installing to Jenkins home..."
                            if [ ! -d "$FLUTTER_HOME" ]; then
                                git clone https://github.com/flutter/flutter.git -b stable --depth 1 "$FLUTTER_HOME"
                            fi
                        else
                            echo "Flutter found in PATH"
                        fi

                        # Flutter 환경 설정
                        flutter --version
                        flutter config --no-analytics
                        flutter precache --no-ios --no-android --no-web
                    '''
                }
            }
        }

        stage('Dependencies') {
            steps {
                sh '''
                    export PATH="$FLUTTER_HOME/bin:$PATH"
                    flutter pub get
                '''
            }
        }

        stage('Code Analysis') {
            steps {
                sh '''
                    export PATH="$FLUTTER_HOME/bin:$PATH"
                    flutter analyze
                '''
            }
        }

        stage('Unit Tests') {
            steps {
                sh '''
                    export PATH="$FLUTTER_HOME/bin:$PATH"
                    flutter test --coverage --machine > test-results.json
                '''
            }
            post {
                always {
                    // 테스트 결과 아카이브
                    archiveArtifacts artifacts: 'test-results.json', allowEmptyArchive: true
                    archiveArtifacts artifacts: 'coverage/lcov.info', allowEmptyArchive: true
                }
            }
        }

        stage('Coverage Report') {
            steps {
                script {
                    // Coverage 보고서 생성
                    sh '''
                        export PATH="$FLUTTER_HOME/bin:$PATH"
                        if [ -f coverage/lcov.info ]; then
                            echo "Coverage report generated"
                            # Coverage 결과를 Jenkins에서 확인할 수 있도록 처리
                            if command -v lcov &> /dev/null; then
                                lcov --summary coverage/lcov.info
                            else
                                echo "lcov not available, skipping summary"
                            fi
                        fi
                    '''
                }
            }
        }
    }

    post {
        always {
            cleanWs()
        }
        success {
            script {
                // PR 상태 업데이트 (GitHub API 사용)
                if (env.pr_source_branch) {
                    sh '''
                        curl -X POST \
                          -H "Authorization: token ${GITHUB_TOKEN}" \
                          -H "Accept: application/vnd.github.v3+json" \
                          https://api.github.com/repos/OWNER/REPO/statuses/${GIT_COMMIT} \
                          -d '{"state":"success","context":"jenkins/unit-tests","description":"Unit tests passed"}'
                    '''
                }
            }
        }
        failure {
            script {
                if (env.pr_source_branch) {
                    sh '''
                        curl -X POST \
                          -H "Authorization: token ${GITHUB_TOKEN}" \
                          -H "Accept: application/vnd.github.v3+json" \
                          https://api.github.com/repos/OWNER/REPO/statuses/${GIT_COMMIT} \
                          -d '{"state":"failure","context":"jenkins/unit-tests","description":"Unit tests failed"}'
                    '''
                }
            }
        }
    }
}
